// Journal functionality
class JournalManager {
    constructor() {
        this.init();
    }

    init() {
        this.setupSaveButton();
    }

    setupSaveButton() {
        const saveBtn = document.getElementById('saveJournalBtn');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.saveJournalEntry());
        }
    }

    async saveJournalEntry() {
        const content = document.getElementById('journalEntry')?.value.trim();
        const saveBtn = document.getElementById('saveJournalBtn');
        
        if (!content) {
            window.dashboard?.showNotification('Please write something in your journal first.', 'warning');
            return;
        }

        if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Analyzing...';
        }

        try {
            const token = await window.authManager.getAuthToken();
            const headers = {
                'Content-Type': 'application/json'
            };
            
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }

            const response = await fetch('/api/journal', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({
                    content: content
                })
            });

            if (response.ok) {
                const data = await response.json();
                
                // Clear the journal entry
                const journalField = document.getElementById('journalEntry');
                if (journalField) journalField.value = '';
                
                // Display AI insights
                this.displayInsights(data.insights);
                
                // Show success message
                window.dashboard?.showNotification('Journal entry saved and analyzed!', 'success');
                
                // Reload recent entries
                await this.loadRecentEntries();
                
            } else {
                throw new Error('Failed to save journal entry');
            }
        } catch (error) {
            console.error('Error saving journal:', error);
            window.dashboard?.showNotification('Failed to save journal entry. Please try again.', 'error');
        } finally {
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="fas fa-brain me-2"></i>Save & Get AI Insights';
            }
        }
    }

    displayInsights(insights) {
        const insightsCard = document.getElementById('insightsCard');
        const insightsContent = document.getElementById('aiInsights');
        
        if (insightsCard && insightsContent && insights) {
            insightsContent.innerHTML = `
                <div class="alert alert-info border-0">
                    <h6 class="alert-heading">
                        <i class="fas fa-lightbulb me-2"></i>AI Insights
                    </h6>
                    <p class="mb-0">${insights}</p>
                </div>
                <div class="mt-3">
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        These insights are generated by AI to help you reflect on your thoughts and emotions.
                    </small>
                </div>
            `;
            insightsCard.style.display = 'block';
            
            // Scroll to insights
            insightsCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }

    async loadRecentEntries() {
        const container = document.getElementById('recentJournalEntries');
        if (!container) return;

        try {
            const token = await window.authManager.getAuthToken();
            const headers = {
                'Content-Type': 'application/json'
            };
            
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }

            const response = await fetch('/api/journal', { headers });
            
            if (response.ok) {
                const data = await response.json();
                const entries = data.entries || [];
                
                if (entries.length === 0) {
                    container.innerHTML = '<p class="text-muted">No journal entries yet.</p>';
                    return;
                }

                container.innerHTML = entries.map(entry => {
                    const date = new Date(entry.created_at);
                    const dateStr = date.toLocaleDateString();
                    const timeStr = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    const preview = this.truncateText(entry.content, 100);
                    
                    return `
                        <div class="border rounded p-3 mb-3 bg-white">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <small class="text-muted">
                                    <i class="fas fa-calendar-alt me-1"></i>${dateStr} at ${timeStr}
                                </small>
                            </div>
                            <p class="mb-2">${preview}</p>
                            ${entry.ai_insights ? `
                                <div class="mt-2 p-2 bg-light rounded">
                                    <small class="text-primary">
                                        <i class="fas fa-brain me-1"></i>AI Insight: ${this.truncateText(entry.ai_insights, 80)}
                                    </small>
                                </div>
                            ` : ''}
                            <button class="btn btn-sm btn-outline-primary mt-2" onclick="journalManager.viewFullEntry('${entry.id}')">
                                Read Full Entry
                            </button>
                        </div>
                    `;
                }).join('');
            } else {
                container.innerHTML = '<p class="text-muted">Unable to load recent entries.</p>';
            }
        } catch (error) {
            console.error('Error loading recent entries:', error);
            container.innerHTML = '<p class="text-muted">Error loading entries.</p>';
        }
    }

    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substr(0, maxLength) + '...';
    }

    viewFullEntry(entryId) {
        // This could open a modal or navigate to a detailed view
        // For now, we'll show a simple alert
        console.log('View full entry:', entryId);
        window.dashboard?.showNotification('Full entry view coming soon!', 'info');
    }

    // Method to get journal prompts for inspiration
    getJournalPrompts() {
        const prompts = [
            "What am I grateful for today?",
            "What emotions did I experience today and why?",
            "What was the highlight of my day?",
            "What challenged me today and how did I handle it?",
            "What would I like to improve about tomorrow?",
            "How did I take care of my mental health today?",
            "What patterns do I notice in my thoughts and feelings?",
            "What made me smile today?",
            "How did I show kindness to myself or others?",
            "What am I looking forward to?"
        ];
        
        return prompts[Math.floor(Math.random() * prompts.length)];
    }

    showRandomPrompt() {
        const journalField = document.getElementById('journalEntry');
        if (journalField && !journalField.value.trim()) {
            const prompt = this.getJournalPrompts();
            journalField.placeholder = `Journal prompt: ${prompt}`;
        }
    }
}

// Initialize journal manager when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.journalManager = new JournalManager();
    
    // Show random prompt when journal field is focused
    const journalField = document.getElementById('journalEntry');
    if (journalField) {
        journalField.addEventListener('focus', () => {
            window.journalManager.showRandomPrompt();
        });
    }
});
